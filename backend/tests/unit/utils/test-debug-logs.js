const { apiVeicularService } = require("./src/services");

/**
 * Teste dos Logs Detalhados de Debug
 * Demonstra os logs tempor√°rios adicionados para debug da API veicular
 */

async function testarLogsDetalhados() {
  console.log("üîç Testando logs detalhados de debug da API veicular...\n");

  // Teste 1: Consulta com placa v√°lida (vai usar fallback devido √† API demo)
  console.log("1Ô∏è‚É£ Teste de consulta com placa v√°lida:");
  try {
    const resultado = await apiVeicularService.consultarVeiculoPorPlaca(
      "ABC1234",
      "192.168.1.100"
    );
    console.log("‚úÖ Resultado da consulta:");
    console.log("- Placa:", resultado.placa);
    console.log("- Origem:", resultado.origem_dados_veiculo);
    console.log("- Marca:", resultado.marca);
    console.log("- Modelo:", resultado.modelo);
  } catch (error) {
    console.log("‚ùå Erro na consulta:", error.message);
  }

  console.log("\n" + "=".repeat(80) + "\n");

  // Teste 2: Consulta com placa inv√°lida
  console.log("2Ô∏è‚É£ Teste de consulta com placa inv√°lida:");
  try {
    const resultado = await apiVeicularService.consultarVeiculoPorPlaca(
      "INVALID",
      "192.168.1.101"
    );
    console.log("‚úÖ Resultado da consulta:");
    console.log("- Placa:", resultado.placa);
    console.log("- Origem:", resultado.origem_dados_veiculo);
  } catch (error) {
    console.log("‚ùå Erro na consulta:", error.message);
  }

  console.log("\n" + "=".repeat(80) + "\n");

  // Teste 3: Consulta com placa no formato antigo
  console.log("3Ô∏è‚É£ Teste de consulta com placa no formato antigo:");
  try {
    const resultado = await apiVeicularService.consultarVeiculoPorPlaca(
      "ABC-1234",
      "192.168.1.102"
    );
    console.log("‚úÖ Resultado da consulta:");
    console.log("- Placa:", resultado.placa);
    console.log("- Origem:", resultado.origem_dados_veiculo);
  } catch (error) {
    console.log("‚ùå Erro na consulta:", error.message);
  }

  console.log("\n" + "=".repeat(80) + "\n");

  // Teste 4: Consulta com placa Mercosul
  console.log("4Ô∏è‚É£ Teste de consulta com placa Mercosul:");
  try {
    const resultado = await apiVeicularService.consultarVeiculoPorPlaca(
      "ABC1D23",
      "192.168.1.103"
    );
    console.log("‚úÖ Resultado da consulta:");
    console.log("- Placa:", resultado.placa);
    console.log("- Origem:", resultado.origem_dados_veiculo);
  } catch (error) {
    console.log("‚ùå Erro na consulta:", error.message);
  }

  console.log("\n" + "=".repeat(80) + "\n");

  // Teste 5: Verificar configura√ß√£o
  console.log("5Ô∏è‚É£ Verificando configura√ß√£o da API:");
  try {
    const config = apiVeicularService.verificarConfiguracao();
    console.log("‚úÖ Configura√ß√£o:");
    console.log("- API Configurada:", config.api_configured);
    console.log("- API Key Presente:", config.api_key_present);
    console.log("- API Key Demo:", config.api_key_demo);
    console.log("- Tipo de Autentica√ß√£o:", config.authentication_type);
    console.log(
      "- Circuit Breaker Habilitado:",
      config.circuit_breaker_enabled
    );
    console.log("- Estado do Circuit Breaker:", config.circuit_breaker_state);
  } catch (error) {
    console.log("‚ùå Erro ao verificar configura√ß√£o:", error.message);
  }

  console.log("\n" + "=".repeat(80) + "\n");

  console.log("üéâ Testes de logs detalhados conclu√≠dos!");
  console.log("\nüìã Resumo dos logs implementados:");
  console.log("‚úÖ DEBUG API VEICULAR - Logs antes da requisi√ß√£o");
  console.log("‚úÖ DEBUG API VEICULAR REQUEST - Interceptor de requisi√ß√£o");
  console.log("‚úÖ DEBUG API VEICULAR RESPONSE - Interceptor de resposta");
  console.log("‚úÖ DEBUG API VEICULAR ERROR - Interceptor de erro");
  console.log("‚úÖ DEBUG FALLBACK - Logs detalhados do fallback");

  console.log("\nüîç Informa√ß√µes capturadas nos logs:");
  console.log("üì§ REQUEST:");
  console.log("  - URL completa da requisi√ß√£o");
  console.log("  - M√©todo HTTP (GET)");
  console.log("  - Headers enviados (incluindo Basic Auth)");
  console.log("  - Configura√ß√£o completa da requisi√ß√£o");
  console.log("  - Par√¢metros e dados");

  console.log("\nüì• RESPONSE:");
  console.log("  - Status HTTP da resposta");
  console.log("  - Headers da resposta");
  console.log("  - Dados completos da resposta (JSON formatado)");
  console.log("  - Configura√ß√£o da requisi√ß√£o original");

  console.log("\n‚ùå ERROR:");
  console.log("  - Mensagem de erro detalhada");
  console.log("  - C√≥digo de erro");
  console.log("  - Status HTTP do erro");
  console.log("  - Dados de erro da API");
  console.log("  - Headers de erro");
  console.log("  - Stack trace completo");

  console.log("\nüö® FALLBACK:");
  console.log("  - Placa que causou o erro");
  console.log("  - Erro completo capturado");
  console.log("  - Detalhes da resposta de erro");
  console.log("  - Configura√ß√£o da requisi√ß√£o que falhou");

  console.log("\nüí° Como usar os logs:");
  console.log("1. Execute uma consulta veicular");
  console.log("2. Observe os logs detalhados no console");
  console.log("3. Identifique o problema espec√≠fico");
  console.log("4. Corrija a configura√ß√£o ou API key");
  console.log("5. Remova os logs tempor√°rios ap√≥s corre√ß√£o");
}

// Executar os testes
testarLogsDetalhados().catch(console.error);
